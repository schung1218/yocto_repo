From d70f2db53715666be25223a5d0d5a7973361e78f Mon Sep 17 00:00:00 2001
From: "Y.C. Huang" <ychuang3@nuvoton.com>
Date: Thu, 23 Jul 2020 10:18:51 +0800
Subject: [PATCH 5/7] USBH: Add USB Host controller EHCI0/1 and OHCI0/1/2
 drivers.

Change-Id: I2d40f1794a3aae129a91c43f6d0ce77f3060ac6f
---
 arch/arm64/boot/dts/nuvoton/nua3500.dtsi |  54 ++++++
 arch/arm64/configs/nua3500_defconfig     | 295 +++++++++++++++++++++++++++++--
 drivers/usb/host/Kconfig                 |  14 ++
 drivers/usb/host/Makefile                |   2 +
 drivers/usb/host/ehci-nua3500.c          | 287 ++++++++++++++++++++++++++++++
 drivers/usb/host/ohci-nua3500.c          | 189 ++++++++++++++++++++
 6 files changed, 831 insertions(+), 10 deletions(-)
 mode change 100755 => 100644 arch/arm64/boot/dts/nuvoton/nua3500.dtsi
 create mode 100644 drivers/usb/host/ehci-nua3500.c
 create mode 100644 drivers/usb/host/ohci-nua3500.c

diff --git a/arch/arm64/boot/dts/nuvoton/nua3500.dtsi b/arch/arm64/boot/dts/nuvoton/nua3500.dtsi
old mode 100755
new mode 100644
index b4653b8..98e623a
--- a/arch/arm64/boot/dts/nuvoton/nua3500.dtsi
+++ b/arch/arm64/boot/dts/nuvoton/nua3500.dtsi
@@ -115,6 +115,60 @@
 	};
 #endif
 
+#if 1   /* USB Host */
+        ehci0: ehci@40140000 {
+		compatible = "nuvoton,nua3500-ehci0";
+		reg = <0x0 0x40140000 0x0 0x1000>;
+		interrupts = <GIC_SPI 33 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+        };
+
+        ehci1: ehci@401C0000 {
+		compatible = "nuvoton,nua3500-ehci1";
+		reg = <0x0 0x401C0000 0x0 0x1000>;
+		interrupts = <GIC_SPI 34 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+        };
+
+        ohci0: ohci@40150000 {
+		compatible = "nuvoton,nua3500-ohci0";
+		reg = <0x0 0x40150000 0x0 0x1000>;
+		interrupts = <GIC_SPI 35 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+        };
+
+        ohci1: ohci@401D0000 {
+		compatible = "nuvoton,nua3500-ohci1";
+		reg = <0x0 0x401D0000 0x0 0x1000>;
+		interrupts = <GIC_SPI 36 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+        };
+
+        /* H/W bug. Non-secure cannot access! */
+        ohci2: ohci@40170000 {
+		compatible = "nuvoton,nua3500-ohci2";
+		reg = <0x0 0x40170000 0x0 0x1000>;
+		interrupts = <GIC_SPI 37 IRQ_TYPE_LEVEL_HIGH>;
+		status = "disabled";
+        };
+
+	/* Crypto engine */
+        crypto: crpt@40300000 {
+		compatible = "nuvoton,nua3500-crypto";
+		reg = <0x0 0x40300000 0x0 0x1000>;
+		interrupts = <GIC_SPI 39 IRQ_TYPE_LEVEL_HIGH>;
+		status = "okay";
+        };
+
+	/* Key Store */
+        key_store: ks@40340800 {
+		compatible = "nuvoton,nua3500-ks";
+		reg = <0x0 0x40340800 0x0 0x800>;
+		interrupts = <GIC_SPI 41 IRQ_TYPE_LEVEL_HIGH>;
+		status = "okay";
+        };
+#endif
+
 #if 1
         sdhci0: sdhci@40180000 {
 		compatible = "snps,dwcmshc-sdhci";
diff --git a/arch/arm64/configs/nua3500_defconfig b/arch/arm64/configs/nua3500_defconfig
index aa46db7..5cd3cab 100755
--- a/arch/arm64/configs/nua3500_defconfig
+++ b/arch/arm64/configs/nua3500_defconfig
@@ -4,13 +4,14 @@
 #
 
 #
-# Compiler: aarch64-linux-gnu-gcc (Linaro GCC 7.3-2018.05) 7.3.1 20180425 [linaro-7.3-2018.05 revision d29120a424ecfbc167ef90065c0eeb7f91977701]
+# Compiler: aarch64-linux-gnu-gcc (Linaro GCC 7.5-2019.12) 7.5.0
 #
 CONFIG_CC_IS_GCC=y
-CONFIG_GCC_VERSION=70301
+CONFIG_GCC_VERSION=70500
 CONFIG_CLANG_VERSION=0
 CONFIG_CC_CAN_LINK=y
 CONFIG_CC_HAS_ASM_GOTO=y
+CONFIG_CC_HAS_ASM_INLINE=y
 CONFIG_IRQ_WORK=y
 CONFIG_BUILDTIME_EXTABLE_SORT=y
 CONFIG_THREAD_INFO_IN_TASK=y
@@ -422,6 +423,7 @@ CONFIG_PM_SLEEP_SMP=y
 CONFIG_PM=y
 CONFIG_PM_DEBUG=y
 CONFIG_PM_ADVANCED_DEBUG=y
+# CONFIG_PM_TEST_SUSPEND is not set
 CONFIG_PM_SLEEP_DEBUG=y
 CONFIG_PM_CLK=y
 CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
@@ -578,6 +580,7 @@ CONFIG_MODULE_UNLOAD=y
 # CONFIG_TRIM_UNUSED_KSYMS is not set
 CONFIG_MODULES_TREE_LOOKUP=y
 CONFIG_BLOCK=y
+CONFIG_BLK_SCSI_REQUEST=y
 # CONFIG_BLK_DEV_BSG is not set
 # CONFIG_BLK_DEV_BSGLIB is not set
 # CONFIG_BLK_DEV_INTEGRITY is not set
@@ -1024,6 +1027,7 @@ CONFIG_BLK_DEV_RAM_SIZE=4096
 # CONFIG_SRAM is not set
 # CONFIG_XILINX_SDFEC is not set
 # CONFIG_PVPANIC is not set
+# CONFIG_NUA3500_KS is not set
 # CONFIG_C2PORT is not set
 
 #
@@ -1081,6 +1085,7 @@ CONFIG_BLK_DEV_RAM_SIZE=4096
 # end of Intel MIC & related support
 
 # CONFIG_ECHO is not set
+# CONFIG_MISC_RTSX_USB is not set
 # end of Misc devices
 
 #
@@ -1088,7 +1093,43 @@ CONFIG_BLK_DEV_RAM_SIZE=4096
 #
 CONFIG_SCSI_MOD=y
 # CONFIG_RAID_ATTRS is not set
-# CONFIG_SCSI is not set
+CONFIG_SCSI=y
+CONFIG_SCSI_DMA=y
+CONFIG_SCSI_PROC_FS=y
+
+#
+# SCSI support type (disk, tape, CD-ROM)
+#
+CONFIG_BLK_DEV_SD=y
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_BLK_DEV_SR is not set
+CONFIG_CHR_DEV_SG=y
+CONFIG_CHR_DEV_SCH=y
+CONFIG_SCSI_CONSTANTS=y
+# CONFIG_SCSI_LOGGING is not set
+CONFIG_SCSI_SCAN_ASYNC=y
+
+#
+# SCSI Transports
+#
+# CONFIG_SCSI_SPI_ATTRS is not set
+# CONFIG_SCSI_FC_ATTRS is not set
+# CONFIG_SCSI_ISCSI_ATTRS is not set
+# CONFIG_SCSI_SAS_ATTRS is not set
+# CONFIG_SCSI_SAS_LIBSAS is not set
+CONFIG_SCSI_SRP_ATTRS=y
+# end of SCSI Transports
+
+CONFIG_SCSI_LOWLEVEL=y
+# CONFIG_ISCSI_TCP is not set
+# CONFIG_ISCSI_BOOT_SYSFS is not set
+# CONFIG_SCSI_UFSHCD is not set
+# CONFIG_SCSI_DEBUG is not set
+CONFIG_SCSI_DH=y
+# CONFIG_SCSI_DH_RDAC is not set
+# CONFIG_SCSI_DH_HP_SW is not set
+# CONFIG_SCSI_DH_EMC is not set
+# CONFIG_SCSI_DH_ALUA is not set
 # end of SCSI device support
 
 CONFIG_HAVE_PATA_PLATFORM=y
@@ -1127,10 +1168,15 @@ CONFIG_NET_CORE=y
 # CONFIG_PHYLIB is not set
 # CONFIG_PPP is not set
 # CONFIG_SLIP is not set
-
-#
-# Host-side USB support is needed for USB Network Adapter support
-#
+CONFIG_USB_NET_DRIVERS=y
+# CONFIG_USB_CATC is not set
+# CONFIG_USB_KAWETH is not set
+# CONFIG_USB_PEGASUS is not set
+# CONFIG_USB_RTL8150 is not set
+# CONFIG_USB_RTL8152 is not set
+# CONFIG_USB_LAN78XX is not set
+# CONFIG_USB_USBNET is not set
+# CONFIG_USB_IPHETH is not set
 # CONFIG_WLAN is not set
 
 #
@@ -1291,6 +1337,11 @@ CONFIG_GPIO_SYSFS=y
 #
 # end of MFD GPIO expanders
 
+#
+# USB GPIO expanders
+#
+# end of USB GPIO expanders
+
 # CONFIG_GPIO_MOCKUP is not set
 # CONFIG_W1 is not set
 # CONFIG_POWER_AVS is not set
@@ -1348,10 +1399,12 @@ CONFIG_BCMA_POSSIBLE=y
 # CONFIG_MFD_ATMEL_FLEXCOM is not set
 # CONFIG_MFD_ATMEL_HLCDC is not set
 # CONFIG_MFD_MADERA is not set
+# CONFIG_MFD_DLN2 is not set
 # CONFIG_MFD_HI6421_PMIC is not set
 # CONFIG_HTC_PASIC3 is not set
 # CONFIG_MFD_KEMPLD is not set
 # CONFIG_MFD_MT6397 is not set
+# CONFIG_MFD_VIPERBOARD is not set
 # CONFIG_MFD_SM501 is not set
 # CONFIG_ABX500_CORE is not set
 CONFIG_MFD_SYSCON=y
@@ -1399,6 +1452,8 @@ CONFIG_FB=y
 # CONFIG_FB_ARMCLCD is not set
 # CONFIG_FB_OPENCORES is not set
 # CONFIG_FB_S1D13XXX is not set
+# CONFIG_FB_SMSCUFX is not set
+# CONFIG_FB_UDL is not set
 # CONFIG_FB_IBM_GXT4500 is not set
 # CONFIG_FB_VIRTUAL is not set
 # CONFIG_FB_METRONOME is not set
@@ -1420,11 +1475,227 @@ CONFIG_FB=y
 #
 # HID support
 #
-# CONFIG_HID is not set
+CONFIG_HID=y
+# CONFIG_HID_BATTERY_STRENGTH is not set
+# CONFIG_HIDRAW is not set
+# CONFIG_UHID is not set
+CONFIG_HID_GENERIC=y
+
+#
+# Special HID drivers
+#
+# CONFIG_HID_A4TECH is not set
+# CONFIG_HID_ACCUTOUCH is not set
+# CONFIG_HID_ACRUX is not set
+# CONFIG_HID_APPLE is not set
+# CONFIG_HID_APPLEIR is not set
+# CONFIG_HID_AUREAL is not set
+# CONFIG_HID_BELKIN is not set
+# CONFIG_HID_BETOP_FF is not set
+# CONFIG_HID_CHERRY is not set
+# CONFIG_HID_CHICONY is not set
+# CONFIG_HID_COUGAR is not set
+# CONFIG_HID_MACALLY is not set
+# CONFIG_HID_CMEDIA is not set
+# CONFIG_HID_CREATIVE_SB0540 is not set
+# CONFIG_HID_CYPRESS is not set
+# CONFIG_HID_DRAGONRISE is not set
+# CONFIG_HID_EMS_FF is not set
+# CONFIG_HID_ELECOM is not set
+# CONFIG_HID_ELO is not set
+# CONFIG_HID_EZKEY is not set
+# CONFIG_HID_GEMBIRD is not set
+# CONFIG_HID_GFRM is not set
+# CONFIG_HID_HOLTEK is not set
+# CONFIG_HID_KEYTOUCH is not set
+# CONFIG_HID_KYE is not set
+# CONFIG_HID_UCLOGIC is not set
+# CONFIG_HID_WALTOP is not set
+# CONFIG_HID_VIEWSONIC is not set
+# CONFIG_HID_GYRATION is not set
+# CONFIG_HID_ICADE is not set
+# CONFIG_HID_ITE is not set
+# CONFIG_HID_JABRA is not set
+# CONFIG_HID_TWINHAN is not set
+# CONFIG_HID_KENSINGTON is not set
+# CONFIG_HID_LCPOWER is not set
+# CONFIG_HID_LENOVO is not set
+# CONFIG_HID_LOGITECH is not set
+# CONFIG_HID_MAGICMOUSE is not set
+# CONFIG_HID_MALTRON is not set
+# CONFIG_HID_MAYFLASH is not set
+# CONFIG_HID_REDRAGON is not set
+# CONFIG_HID_MICROSOFT is not set
+# CONFIG_HID_MONTEREY is not set
+# CONFIG_HID_MULTITOUCH is not set
+# CONFIG_HID_NTI is not set
+# CONFIG_HID_NTRIG is not set
+# CONFIG_HID_ORTEK is not set
+# CONFIG_HID_PANTHERLORD is not set
+# CONFIG_HID_PENMOUNT is not set
+# CONFIG_HID_PETALYNX is not set
+# CONFIG_HID_PICOLCD is not set
+# CONFIG_HID_PLANTRONICS is not set
+# CONFIG_HID_PRIMAX is not set
+# CONFIG_HID_RETRODE is not set
+# CONFIG_HID_ROCCAT is not set
+# CONFIG_HID_SAITEK is not set
+# CONFIG_HID_SAMSUNG is not set
+# CONFIG_HID_SPEEDLINK is not set
+# CONFIG_HID_STEAM is not set
+# CONFIG_HID_STEELSERIES is not set
+# CONFIG_HID_SUNPLUS is not set
+# CONFIG_HID_RMI is not set
+# CONFIG_HID_GREENASIA is not set
+# CONFIG_HID_SMARTJOYPLUS is not set
+# CONFIG_HID_TIVO is not set
+# CONFIG_HID_TOPSEED is not set
+# CONFIG_HID_THRUSTMASTER is not set
+# CONFIG_HID_UDRAW_PS3 is not set
+# CONFIG_HID_WACOM is not set
+# CONFIG_HID_XINMO is not set
+# CONFIG_HID_ZEROPLUS is not set
+# CONFIG_HID_ZYDACRON is not set
+# CONFIG_HID_SENSOR_HUB is not set
+# CONFIG_HID_ALPS is not set
+# end of Special HID drivers
+
+#
+# USB HID support
+#
+CONFIG_USB_HID=y
+# CONFIG_HID_PID is not set
+# CONFIG_USB_HIDDEV is not set
+# end of USB HID support
 # end of HID support
 
 CONFIG_USB_OHCI_LITTLE_ENDIAN=y
-# CONFIG_USB_SUPPORT is not set
+CONFIG_USB_SUPPORT=y
+CONFIG_USB_COMMON=y
+# CONFIG_USB_ULPI_BUS is not set
+# CONFIG_USB_CONN_GPIO is not set
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB=y
+# CONFIG_USB_ANNOUNCE_NEW_DEVICES is not set
+
+#
+# Miscellaneous USB options
+#
+CONFIG_USB_DEFAULT_PERSIST=y
+# CONFIG_USB_DYNAMIC_MINORS is not set
+# CONFIG_USB_OTG is not set
+# CONFIG_USB_OTG_WHITELIST is not set
+# CONFIG_USB_OTG_BLACKLIST_HUB is not set
+CONFIG_USB_AUTOSUSPEND_DELAY=2
+# CONFIG_USB_MON is not set
+
+#
+# USB Host Controller Drivers
+#
+# CONFIG_USB_C67X00_HCD is not set
+# CONFIG_USB_XHCI_HCD is not set
+CONFIG_USB_EHCI_HCD=y
+# CONFIG_USB_EHCI_ROOT_HUB_TT is not set
+CONFIG_USB_EHCI_TT_NEWSCHED=y
+# CONFIG_USB_EHCI_FSL is not set
+CONFIG_USB_EHCI_HCD_NUA3500=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+# CONFIG_USB_OXU210HP_HCD is not set
+# CONFIG_USB_ISP116X_HCD is not set
+# CONFIG_USB_FOTG210_HCD is not set
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_NUA3500=y
+CONFIG_USB_OHCI_HCD_PLATFORM=y
+# CONFIG_USB_SL811_HCD is not set
+# CONFIG_USB_R8A66597_HCD is not set
+# CONFIG_USB_HCD_TEST_MODE is not set
+
+#
+# USB Device Class drivers
+#
+# CONFIG_USB_ACM is not set
+# CONFIG_USB_PRINTER is not set
+# CONFIG_USB_WDM is not set
+# CONFIG_USB_TMC is not set
+
+#
+# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may
+#
+
+#
+# also be needed; see USB_STORAGE Help for more info
+#
+CONFIG_USB_STORAGE=y
+# CONFIG_USB_STORAGE_DEBUG is not set
+# CONFIG_USB_STORAGE_REALTEK is not set
+# CONFIG_USB_STORAGE_DATAFAB is not set
+# CONFIG_USB_STORAGE_FREECOM is not set
+# CONFIG_USB_STORAGE_ISD200 is not set
+# CONFIG_USB_STORAGE_USBAT is not set
+# CONFIG_USB_STORAGE_SDDR09 is not set
+# CONFIG_USB_STORAGE_SDDR55 is not set
+# CONFIG_USB_STORAGE_JUMPSHOT is not set
+# CONFIG_USB_STORAGE_ALAUDA is not set
+# CONFIG_USB_STORAGE_ONETOUCH is not set
+# CONFIG_USB_STORAGE_KARMA is not set
+# CONFIG_USB_STORAGE_CYPRESS_ATACB is not set
+# CONFIG_USB_STORAGE_ENE_UB6250 is not set
+CONFIG_USB_UAS=y
+
+#
+# USB Imaging devices
+#
+# CONFIG_USB_MDC800 is not set
+# CONFIG_USB_MICROTEK is not set
+# CONFIG_USBIP_CORE is not set
+# CONFIG_USB_CDNS3 is not set
+# CONFIG_USB_MUSB_HDRC is not set
+# CONFIG_USB_DWC3 is not set
+# CONFIG_USB_DWC2 is not set
+# CONFIG_USB_CHIPIDEA is not set
+# CONFIG_USB_ISP1760 is not set
+
+#
+# USB port drivers
+#
+# CONFIG_USB_SERIAL is not set
+
+#
+# USB Miscellaneous drivers
+#
+# CONFIG_USB_EMI62 is not set
+# CONFIG_USB_EMI26 is not set
+# CONFIG_USB_ADUTUX is not set
+# CONFIG_USB_SEVSEG is not set
+# CONFIG_USB_LEGOTOWER is not set
+# CONFIG_USB_LCD is not set
+# CONFIG_USB_CYPRESS_CY7C63 is not set
+# CONFIG_USB_CYTHERM is not set
+# CONFIG_USB_IDMOUSE is not set
+# CONFIG_USB_FTDI_ELAN is not set
+# CONFIG_USB_APPLEDISPLAY is not set
+# CONFIG_USB_SISUSBVGA is not set
+# CONFIG_USB_LD is not set
+# CONFIG_USB_TRANCEVIBRATOR is not set
+# CONFIG_USB_IOWARRIOR is not set
+# CONFIG_USB_TEST is not set
+# CONFIG_USB_EHSET_TEST_FIXTURE is not set
+# CONFIG_USB_ISIGHTFW is not set
+# CONFIG_USB_YUREX is not set
+# CONFIG_USB_EZUSB_FX2 is not set
+# CONFIG_USB_LINK_LAYER_TEST is not set
+
+#
+# USB Physical Layer drivers
+#
+# CONFIG_NOP_USB_XCEIV is not set
+# CONFIG_USB_GPIO_VBUS is not set
+# CONFIG_USB_ULPI is not set
+# end of USB Physical Layer drivers
+
+# CONFIG_USB_GADGET is not set
+# CONFIG_TYPEC is not set
+# CONFIG_USB_ROLE_SWITCH is not set
 CONFIG_MMC=y
 CONFIG_PWRSEQ_EMMC=y
 CONFIG_PWRSEQ_SIMPLE=y
@@ -1447,6 +1718,8 @@ CONFIG_MMC_SDHCI_OF_DWCMSHC=y
 # CONFIG_MMC_SDHCI_CADENCE is not set
 # CONFIG_MMC_SDHCI_F_SDH30 is not set
 # CONFIG_MMC_DW is not set
+# CONFIG_MMC_VUB300 is not set
+# CONFIG_MMC_USHC is not set
 # CONFIG_MMC_USDHI6ROL0 is not set
 # CONFIG_MMC_CQHCI is not set
 # CONFIG_MMC_MTK is not set
@@ -1681,6 +1954,7 @@ CONFIG_PARTITION_PERCPU=y
 # CONFIG_PHY_MIXEL_MIPI_DPHY is not set
 # CONFIG_PHY_PXA_28NM_HSIC is not set
 # CONFIG_PHY_PXA_28NM_USB2 is not set
+# CONFIG_PHY_MAPPHONE_MDM6600 is not set
 # CONFIG_PHY_OCELOT_SERDES is not set
 # end of PHY Subsystem
 
@@ -1775,7 +2049,7 @@ CONFIG_EXPORTFS=y
 # DOS/FAT/NT Filesystems
 #
 CONFIG_FAT_FS=y
-# CONFIG_MSDOS_FS is not set
+CONFIG_MSDOS_FS=y
 CONFIG_VFAT_FS=y
 CONFIG_FAT_DEFAULT_CODEPAGE=437
 CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
@@ -2130,6 +2404,7 @@ CONFIG_NLATTR=y
 CONFIG_LIBFDT=y
 CONFIG_HAVE_GENERIC_VDSO=y
 CONFIG_GENERIC_GETTIMEOFDAY=y
+CONFIG_SG_POOL=y
 CONFIG_SBITMAP=y
 # CONFIG_STRING_SELFTEST is not set
 # end of Library routines
diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index 79b2e79..04aa034 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -236,6 +236,13 @@ config USB_EHCI_HCD_STI
 	  Enable support for the on-chip EHCI controller found on
 	  STMicroelectronics consumer electronics SoC's.
 
+config USB_EHCI_HCD_NUA3500
+        tristate  "Support for Nuvoton NUA3500 EHCI USB controller"
+        depends on USB_EHCI_HCD && ARCH_NUA3500
+        default y
+        ---help---
+          Enables support for Nuvoton NUA3500 EHCI USB controller.
+
 config USB_EHCI_HCD_AT91
         tristate  "Support for Atmel on-chip EHCI USB controller"
         depends on USB_EHCI_HCD && ARCH_AT91
@@ -482,6 +489,13 @@ config USB_OHCI_HCD_DAVINCI
 	  controller. This driver cannot currently be a loadable
 	  module because it lacks a proper PHY abstraction.
 
+config USB_OHCI_HCD_NUA3500
+        tristate  "Support for Nuvoton NUA3500 OHCI USB controller"
+        depends on USB_OHCI_HCD && ARCH_NUA3500
+        default y
+        ---help---
+          Enables support for Nuvoton NUA3500 OHCI USB controller.
+
 config USB_OHCI_HCD_PPC_OF_BE
 	bool "OHCI support for OF platform bus (big endian)"
 	depends on PPC
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index b191361..1165e86 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -49,6 +49,7 @@ obj-$(CONFIG_USB_EHCI_HCD_STI)	+= ehci-st.o
 obj-$(CONFIG_USB_EHCI_EXYNOS)	+= ehci-exynos.o
 obj-$(CONFIG_USB_EHCI_HCD_AT91) += ehci-atmel.o
 obj-$(CONFIG_USB_EHCI_TEGRA)	+= ehci-tegra.o
+obj-$(CONFIG_USB_EHCI_HCD_NUA3500) += ehci-nua3500.o
 
 obj-$(CONFIG_USB_OXU210HP_HCD)	+= oxu210hp-hcd.o
 obj-$(CONFIG_USB_ISP116X_HCD)	+= isp116x-hcd.o
@@ -66,6 +67,7 @@ obj-$(CONFIG_USB_OHCI_HCD_S3C2410)	+= ohci-s3c2410.o
 obj-$(CONFIG_USB_OHCI_HCD_LPC32XX)	+= ohci-nxp.o
 obj-$(CONFIG_USB_OHCI_HCD_PXA27X)	+= ohci-pxa27x.o
 obj-$(CONFIG_USB_OHCI_HCD_DAVINCI)	+= ohci-da8xx.o
+obj-$(CONFIG_USB_OHCI_HCD_NUA3500) += ohci-nua3500.o
 
 obj-$(CONFIG_USB_UHCI_HCD)	+= uhci-hcd.o
 obj-$(CONFIG_USB_FHCI_HCD)	+= fhci.o
diff --git a/drivers/usb/host/ehci-nua3500.c b/drivers/usb/host/ehci-nua3500.c
new file mode 100644
index 0000000..b2d27c5
--- /dev/null
+++ b/drivers/usb/host/ehci-nua3500.c
@@ -0,0 +1,287 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * linux/driver/usb/host/ehci-nua3500.c
+ *
+ * Copyright (c) 2020 Nuvoton technology corporation.
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation;version 2 of the License.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/clk.h>
+#include <linux/dma-mapping.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
+
+#include "ehci.h"
+
+#define DRIVER_DESC "Nuvoton NUA3500 EHCI driver"
+
+static const char hcd_name[] = "ehci-nua3500";
+
+/* interface and function clocks */
+#define hcd_to_nua3500_ehci_priv(h) \
+	((struct nua3500_ehci_priv *)hcd_to_ehci(h)->priv)
+
+struct nua3500_ehci_priv {
+	int   id;
+	struct clk *iclk;
+	struct clk *uclk;
+	bool clocked;
+};
+
+static struct hc_driver __read_mostly ehci_nua3500_hc_driver;
+
+static const struct ehci_driver_overrides ehci_nua3500_drv_overrides __initconst = {
+	.extra_priv_size = sizeof(struct nua3500_ehci_priv),
+};
+
+/*-------------------------------------------------------------------------*/
+
+static void nua3500_start_clock(struct nua3500_ehci_priv *nua3500_ehci)
+{
+	if (nua3500_ehci->clocked)
+		return;
+
+	//clk_prepare_enable(nua3500_ehci->uclk);
+	//clk_prepare_enable(nua3500_ehci->iclk);
+	nua3500_ehci->clocked = true;
+}
+
+static void nua3500_stop_clock(struct nua3500_ehci_priv *nua3500_ehci)
+{
+	if (!nua3500_ehci->clocked)
+		return;
+
+	//clk_disable_unprepare(nua3500_ehci->iclk);
+	//clk_disable_unprepare(nua3500_ehci->uclk);
+	nua3500_ehci->clocked = false;
+}
+
+static void nua3500_start_ehci(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+	struct nua3500_ehci_priv *nua3500_ehci = hcd_to_nua3500_ehci_priv(hcd);
+
+#if 1  // temporary hard coding, because sys and clk driver is not ready
+	unsigned char __iomem * sys_base;
+	unsigned char __iomem * umctl2_base;
+
+ 	sys_base = ioremap_nocache(0x40460000, 0x10000);
+ 	umctl2_base = ioremap_nocache(0x404d0000, 0x10000);
+
+	printk("Before, SYSCLK0: 0x%x\n", __raw_readl(sys_base+0x204));
+
+	/* Enable HSUSBH0 clock */
+	__raw_writel(__raw_readl(sys_base+0x204) | (1 << 21), sys_base+0x204);
+	/* Enable HSUSBH1 clock */
+	__raw_writel(__raw_readl(sys_base+0x204) | (1 << 22), sys_base+0x204);
+	
+	__raw_writel(__raw_readl(sys_base+0x204) | 0x02700037, sys_base+0x204);
+
+	__raw_writel(0x20002, sys_base+0x60);   /* USBPMISCR; enable HSUSBH0 & HSUSBH1 PHY */
+
+	/* set UHOVRCURH(SYS_MISCFCR0[12]) 1 => USBH Host over-current detect is high-active */
+	/*                                 0 => USBH Host over-current detect is low-active  */
+	// __raw_writel(__raw_readl(sys_base+0x70) | (1 << 12), sys_base+0x70);
+	 __raw_writel(__raw_readl(sys_base+0x70) & ~(1 << 12), sys_base+0x70);
+
+	/* set PL.12 as MFP9 for HSUSBH_PWREN */
+	__raw_writel(((__raw_readl(sys_base+0xdc) & 0xfff0ffff) | 0x90000), sys_base+0xdc);
+
+	/* set PL.13 as MFP9 for HSUSBH_OVC */
+	__raw_writel(((__raw_readl(sys_base+0xdc) & 0xff0fffff) | 0x900000), sys_base+0xdc);
+
+#endif
+
+	dev_dbg(&pdev->dev, "start\n");
+	nua3500_start_clock(nua3500_ehci);
+}
+
+static void nua3500_stop_ehci(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+	struct nua3500_ehci_priv *nua3500_ehci = hcd_to_nua3500_ehci_priv(hcd);
+
+	dev_dbg(&pdev->dev, "stop\n");
+	nua3500_stop_clock(nua3500_ehci);
+}
+
+
+/*-------------------------------------------------------------------------*/
+
+static int ehci_nua3500_drv_probe(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd;
+	const struct hc_driver *driver = &ehci_nua3500_hc_driver;
+	struct resource *res;
+	struct ehci_hcd *ehci;
+	struct nua3500_ehci_priv *nua3500_ehci;
+	int irq;
+	int retval;
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_debug("Initializing NUA3500 EHCI...\n");
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq <= 0) {
+		retval = -ENODEV;
+		goto fail_create_hcd;
+	}
+
+	/* Right now device-tree probed devices don't get dma_mask set.
+	 * Since shared usb code relies on it, set it here for now.
+	 * Once we have dma capability bindings this can go away.
+	 */
+	retval = dma_coerce_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32));
+	if (retval)
+		goto fail_create_hcd;
+
+	hcd = usb_create_hcd(driver, &pdev->dev, dev_name(&pdev->dev));
+	if (!hcd) {
+		retval = -ENOMEM;
+		goto fail_create_hcd;
+	}
+	nua3500_ehci = hcd_to_nua3500_ehci_priv(hcd);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	hcd->regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(hcd->regs)) {
+		retval = PTR_ERR(hcd->regs);
+		goto fail_request_resource;
+	}
+	
+	hcd->rsrc_start = res->start;
+	hcd->rsrc_len = resource_size(res);
+
+	//nua3500_ehci->iclk = devm_clk_get(&pdev->dev, "ehci_clk");
+	//if (IS_ERR(nua3500_ehci->iclk)) {
+	//	dev_err(&pdev->dev, "Error getting interface clock\n");
+	//	retval = -ENOENT;
+	//	goto fail_request_resource;
+	//}
+
+	//nua3500_ehci->uclk = devm_clk_get(&pdev->dev, "usb_clk");
+	//if (IS_ERR(nua3500_ehci->uclk)) {
+	//	dev_err(&pdev->dev, "failed to get uclk\n");
+	//	retval = PTR_ERR(nua3500_ehci->uclk);
+	//	goto fail_request_resource;
+	//}
+
+	ehci = hcd_to_ehci(hcd);
+	/* registers start at offset 0x0 */
+	ehci->caps = hcd->regs;
+
+	nua3500_start_ehci(pdev);
+
+	retval = usb_add_hcd(hcd, irq, IRQF_SHARED);
+	if (retval)
+		goto fail_add_hcd;
+	device_wakeup_enable(hcd->self.controller);
+
+	printk("PORT0 = 0x%x\n", __raw_readl(hcd->regs+0x54));
+
+	return retval;
+
+fail_add_hcd:
+	nua3500_stop_ehci(pdev);
+fail_request_resource:
+	usb_put_hcd(hcd);
+fail_create_hcd:
+	dev_err(&pdev->dev, "init %s fail, %d\n",
+		dev_name(&pdev->dev), retval);
+
+	return retval;
+}
+
+static int ehci_nua3500_drv_remove(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+
+	usb_remove_hcd(hcd);
+	usb_put_hcd(hcd);
+
+	nua3500_stop_ehci(pdev);
+
+	return 0;
+}
+
+static int __maybe_unused ehci_nua3500_drv_suspend(struct device *dev)
+{
+	struct usb_hcd *hcd = dev_get_drvdata(dev);
+	struct nua3500_ehci_priv *nua3500_ehci = hcd_to_nua3500_ehci_priv(hcd);
+	int ret;
+
+	ret = ehci_suspend(hcd, false);
+	if (ret)
+		return ret;
+
+	nua3500_stop_clock(nua3500_ehci);
+	return 0;
+}
+
+static int __maybe_unused ehci_nua3500_drv_resume(struct device *dev)
+{
+	struct usb_hcd *hcd = dev_get_drvdata(dev);
+	struct nua3500_ehci_priv *nua3500_ehci = hcd_to_nua3500_ehci_priv(hcd);
+
+	nua3500_start_clock(nua3500_ehci);
+	ehci_resume(hcd, false);
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id nua3500_ehci_dt_ids[] = {
+	{ .compatible = "nuvoton,nua3500-ehci0" },
+	{ .compatible = "nuvoton,nua3500-ehci1" },
+	{ /* sentinel */ }
+};
+
+MODULE_DEVICE_TABLE(of, nua3500_ehci_dt_ids);
+#endif
+
+static SIMPLE_DEV_PM_OPS(ehci_nua3500_pm_ops, ehci_nua3500_drv_suspend,
+					ehci_nua3500_drv_resume);
+
+static struct platform_driver ehci_nua3500_driver = {
+	.probe		= ehci_nua3500_drv_probe,
+	.remove		= ehci_nua3500_drv_remove,
+	.shutdown	= usb_hcd_platform_shutdown,
+	.driver		= {
+		.name	= "nua3500-ehci",
+		.pm	= &ehci_nua3500_pm_ops,
+		.of_match_table	= of_match_ptr(nua3500_ehci_dt_ids),
+	},
+};
+
+static int __init ehci_nua3500_init(void)
+{
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+	ehci_init_driver(&ehci_nua3500_hc_driver, &ehci_nua3500_drv_overrides);
+	return platform_driver_register(&ehci_nua3500_driver);
+}
+module_init(ehci_nua3500_init);
+
+static void __exit ehci_nua3500_cleanup(void)
+{
+	platform_driver_unregister(&ehci_nua3500_driver);
+}
+module_exit(ehci_nua3500_cleanup);
+
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_ALIAS("platform:nua3500-ehci");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/usb/host/ohci-nua3500.c b/drivers/usb/host/ohci-nua3500.c
new file mode 100644
index 0000000..0872de5
--- /dev/null
+++ b/drivers/usb/host/ohci-nua3500.c
@@ -0,0 +1,189 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * linux/driver/usb/host/ehci-nua3500.c
+ *
+ * Copyright (c) 2020 Nuvoton technology corporation.
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation;version 2 of the License.
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/dma-mapping.h>
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/usb/isp1301.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
+
+#include "ohci.h"
+
+
+#define DRIVER_DESC "Nuvoton NUA3500 OHCI driver"
+
+static const char hcd_name[] = "ohci-nua3500";
+static struct hc_driver __read_mostly ohci_nua3500_hc_driver;
+
+
+static struct clk *usb_host_clk;
+
+
+static void ohci_nua3500_start_hc(struct platform_device *pdev)
+{
+#if 1  // temporary hard coding, because sys and clk driver is not ready
+	unsigned char __iomem * sys_base;
+
+ 	sys_base = ioremap_nocache(0x40460000, 0x10000);
+
+	/* Enable USBH0 clock */
+	__raw_writel(__raw_readl(sys_base+0x204) | (1 << 21), sys_base+0x204);
+	/* Enable USBH1 clock */
+	__raw_writel(__raw_readl(sys_base+0x204) | (1 << 22), sys_base+0x204);
+	/* Enable USBH2 clock */
+	__raw_writel(__raw_readl(sys_base+0x204) | (1 << 20), sys_base+0x204);
+	
+	/* set UHOVRCURH(SYS_MISCFCR0[12]) 1 => USBH Host over-current detect is high-active */
+	/*                                 0 => USBH Host over-current detect is low-active  */
+	// __raw_writel(__raw_readl(sys_base+0x70) | (1 << 12), sys_base+0x70);
+	 __raw_writel(__raw_readl(sys_base+0x70) & ~(1 << 12), sys_base+0x70);
+
+	/* set PL.12 as MFP9 for HSUSBH_PWREN */
+	__raw_writel(((__raw_readl(sys_base+0xdc) & 0xfff0ffff) | 0x90000), sys_base+0xdc);
+
+	/* set PL.13 as MFP9 for HSUSBH_OVC */
+	__raw_writel(((__raw_readl(sys_base+0xdc) & 0xff0fffff) | 0x900000), sys_base+0xdc);
+
+#endif
+}
+
+
+static int ohci_hcd_nua3500_probe(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = 0;
+	const struct hc_driver *driver = &ohci_nua3500_hc_driver;
+	struct resource *res;
+	int ret = 0, irq;
+
+	ret = dma_coerce_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32));
+	if (ret)
+		return ret;
+
+	dev_dbg(&pdev->dev, "%s: " DRIVER_DESC " (nxp)\n", hcd_name);
+	if (usb_disabled()) {
+		dev_err(&pdev->dev, "USB is disabled\n");
+		return -ENODEV;
+	}
+
+	/* Enable USB host clock */
+	//usb_host_clk = devm_clk_get(&pdev->dev, NULL);
+	//if (IS_ERR(usb_host_clk)) {
+	//	dev_err(&pdev->dev, "failed to acquire USB OHCI clock\n");
+	//	ret = PTR_ERR(usb_host_clk);
+	//	return ret;
+	//}
+
+	//ret = clk_prepare_enable(usb_host_clk);
+	//if (ret < 0) {
+	//	dev_err(&pdev->dev, "failed to start USB OHCI clock\n");
+	//	return ret;
+	//}
+
+	hcd = usb_create_hcd(driver, &pdev->dev, dev_name(&pdev->dev));
+	if (!hcd) {
+		dev_err(&pdev->dev, "Failed to allocate HC buffer\n");
+		ret = -ENOMEM;
+		goto fail_hcd;
+	}
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	hcd->regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(hcd->regs)) {
+		ret = PTR_ERR(hcd->regs);
+		goto fail_resource;
+	}
+	hcd->rsrc_start = res->start;
+	hcd->rsrc_len = resource_size(res);
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		ret = -ENXIO;
+		goto fail_resource;
+	}
+
+	ohci_nua3500_start_hc(pdev);
+	platform_set_drvdata(pdev, hcd);
+
+	dev_info(&pdev->dev, "at 0x%p, irq %d\n", hcd->regs, hcd->irq);
+	ret = usb_add_hcd(hcd, irq, 0);
+	if (ret == 0) {
+		device_wakeup_enable(hcd->self.controller);
+		return ret;
+	}
+
+fail_resource:
+	usb_put_hcd(hcd);
+fail_hcd:
+	clk_disable_unprepare(usb_host_clk);
+	return ret;
+}
+
+static int ohci_hcd_nua3500_remove(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+
+	usb_remove_hcd(hcd);
+	usb_put_hcd(hcd);
+	clk_disable_unprepare(usb_host_clk);
+
+	return 0;
+}
+
+/* work with hotplug and coldplug */
+MODULE_ALIAS("platform:usb-ohci");
+
+#ifdef CONFIG_OF
+static const struct of_device_id ohci_hcd_nua3500_match[] = {
+	{ .compatible = "nuvoton,nua3500-ohci0" },
+	{ .compatible = "nuvoton,nua3500-ohci1" },
+	{ .compatible = "nuvoton,nua3500-ohci2" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ohci_hcd_nua3500_match);
+#endif
+
+static struct platform_driver ohci_hcd_nua3500_driver = {
+	.driver = {
+		.name = "usb-ohci",
+		.of_match_table = of_match_ptr(ohci_hcd_nua3500_match),
+	},
+	.probe = ohci_hcd_nua3500_probe,
+	.remove = ohci_hcd_nua3500_remove,
+};
+
+static int __init ohci_nua3500_init(void)
+{
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+
+	ohci_init_driver(&ohci_nua3500_hc_driver, NULL);
+	return platform_driver_register(&ohci_hcd_nua3500_driver);
+}
+module_init(ohci_nua3500_init);
+
+static void __exit ohci_nua3500_cleanup(void)
+{
+	platform_driver_unregister(&ohci_hcd_nua3500_driver);
+}
+module_exit(ohci_nua3500_cleanup);
+
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_ALIAS("platform:nua3500-ohci");
+MODULE_LICENSE("GPL v2");
-- 
2.0.3

